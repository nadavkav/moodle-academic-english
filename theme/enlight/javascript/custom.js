!function t(e,n,i){function o(s,a){if(!n[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[s]={exports:{}};e[s][0].call(l.exports,function(t){var n=e[s][1][t];return o(n?n:t)},l,l.exports,t,e,n,i)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t){var e=document.cookie.match(new RegExp("(?:^|; )"+t.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,"\\$1")+"=([^;]*)"));return e?decodeURIComponent(e[1]):void 0}function r(t,e,n){n=n||{};var i=n.expires;if("number"==typeof i&&i){var o=new Date;o.setTime(o.getTime()+1e3*i),i=n.expires=o}i&&i.toUTCString&&(n.expires=i.toUTCString()),e=encodeURIComponent(e);var r=t+"="+e;for(var s in n){r+="; "+s;var a=n[s];a!==!0&&(r+="="+a)}document.cookie=r}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();n.Course=function(){function t(){i(this,t),this.courseAbout=$(".course__about"),this.list=document.getElementsByClassName("topics")[0],this._state=this._setState(),this._init()}return s(t,[{key:"_init",value:function(){this.list&&(this._numberOrdering(),"desktop"==this._state&&this._shiftUnits()),this._addHandlers()}},{key:"_addHandlers",value:function(){var t=this;$(".about-button").on("click",function(){t._toggleAbout()}),$(window).on("resize",function(){var e=t._setState();e!=t._state&&(t._state=e,$(window).trigger("resolutionChanged"))}),$(window).on("resolutionChanged",function(){t._shiftUnits()})}},{key:"_setState",value:function(){return $(window).width()<768?"mobile":"desktop"}},{key:"_numberOrdering",value:function(){for(var t=this.list.getElementsByTagName("li"),e=0;e<t.length;e++)t[e].dataset.unitOrder=e}},{key:"_shiftUnits",value:function(){var t=this;if(this.list){var e=this.list.getElementsByClassName("unit"),n=Math.ceil(e.length/2),i=[];if("mobile"==this._state){for(var o=0;o<e.length;o++)i.push(e[o]);for(i.push(this.list.children[this.list.children.length-1]),i.sort(function(t,e){return t.dataset.unitOrder-e.dataset.unitOrder});this.list.firstChild;)this.list.removeChild(this.list.firstChild);return void i.forEach(function(e){t.list.appendChild(e)})}i.push(e[0]);for(var r=0;n>r;r++)n+r<e.length&&i.push(e[n+r]),r+1!=n&&i.push(e[r+1]);for(i.push(this.list.children[this.list.children.length-1]);this.list.firstChild;)this.list.removeChild(this.list.firstChild);i.forEach(function(e){t.list.appendChild(e)})}}},{key:"_toggleAbout",value:function(){var t=this,e=200;this.courseAbout.hasClass("open")?this.courseAbout.animate({height:125},e,function(){t.courseAbout.removeClass("open")}):this.courseAbout.animate({height:parseInt(this.courseAbout.css("padding-top"),10)+parseInt(this.courseAbout.css("padding-bottom"),10)+this.courseAbout.children(".container-fluid").height()+this.courseAbout.children(".about-close").outerHeight()},e,function(){t.courseAbout.addClass("open")})}}],[{key:"_isFirstVisit",value:function(){var t=document.body.className,e=/course-\d/.exec(t)[0],n=e+"_first_visit",i=o(n);if(i)return!1;var s=new Date;return r(n,!1,{expires:new Date(s.getFullYear(),s.getMonth()+6)}),!0}}]),t}()},{}],2:[function(t,e,n){"use strict";function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0}),n.Help=void 0;var s=function l(t,e,n){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,e);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:l(o,e,n)}if("value"in i)return i.value;var r=i.get;if(void 0!==r)return r.call(n)},a=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=t("./Popup"),c=(n.Help=function(){function t(){r(this,t),this.faq=$(".faq__list li"),this.popup=document.getElementById("help-popup"),this.showPopupBtn=document.getElementById("show-popup"),this._init()}return a(t,[{key:"_addHandlers",value:function(){var t=this;this.faq.on("click",function(){$(this).toggleClass("active"),$(this).find("p:not(.faq__title)").slideToggle(100)}),$(this.showPopupBtn).on("click",function(){t.popup.show()})}},{key:"_init",value:function(){this._addHandlers(),this.popup&&(this.popup=new c(this.popup))}}]),t}(),function(t){function e(t){r(this,e);var n=i(this,Object.getPrototypeOf(e).call(this));return n._form=t,n._init(),n}return o(e,t),a(e,[{key:"_init",value:function(){var t=this;s(Object.getPrototypeOf(e.prototype),"_init",this).call(this),$(this._closeBtn).off("click"),$(this._closeBtn).on("click",function(){t.hide()})}},{key:"_createPopup",value:function(){s(Object.getPrototypeOf(e.prototype),"_createPopup",this).call(this),this._container.className+=this._container.className=" help-popup",this._content.appendChild(this._form)}}]),e}(u.Popup))},{"./Popup":3}],3:[function(t,e,n){"use strict";function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var s=function c(t,e,n){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,e);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:c(o,e,n)}if("value"in i)return i.value;var r=i.get;if(void 0!==r)return r.call(n)},a=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=n.Popup=function(){function t(){r(this,t),this._container,this._content,this._overlay,this._closeBtn}return a(t,[{key:"_init",value:function(){var t=this;this._createPopup(),this.centerPopup(),$(this._closeBtn).on("click",function(){t.hide(),t._destroy()})}},{key:"_destroy",value:function(){document.body.removeChild(this._overlay),document.body.removeChild(this._container)}},{key:"_createPopup",value:function(){var t=document.createElement("div");t.className="popup",document.body.appendChild(t);var e=document.createElement("div");e.className="popup__close",t.appendChild(e),this._closeBtn=e;var n=document.createElement("div");n.className="overlay",document.body.appendChild(n),this._overlay=n;var i=document.createElement("div");i.className="popup__content",t.appendChild(i),this._content=i,this._container=t}},{key:"centerPopup",value:function(){var t=$(window).width(),e=$(window).height(),n=$(this._container).width(),i=$(this._container).height();t>n&&$(this._container).css("left",(t-n)/2),e>i&&$(this._container).css("top",(e-i)/2),$(window).on("resize",this.centerPopup.bind(this))}},{key:"show",value:function(){$(this._overlay).fadeIn(100),$(this._container).fadeIn(100)}},{key:"hide",value:function(){$(this._overlay).fadeOut(100),$(this._container).fadeOut(100)}}]),t}();n.VideoPopup=function(t){function e(t){r(this,e);var n=i(this,Object.getPrototypeOf(e).call(this));return n._url=t,n._init(),n}return o(e,t),a(e,[{key:"_createPopup",value:function(){s(Object.getPrototypeOf(e.prototype),"_createPopup",this).call(this);var t=document.createElement("iframe");t.setAttribute("width","100%"),t.setAttribute("height","100%"),t.setAttribute("frameborder","0"),t.setAttribute("width","100%"),t.setAttribute("allowfullscreen",!0),t.setAttribute("src",this._url),this._content.appendChild(t)}}]),e}(u)},{}],4:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0}),n.Unit=void 0;var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=t("../utils.js"),s=t("./Popup");n.Unit=function(){function t(){i(this,t),this.showListBtn=$(".show-lesson-list"),this.list=$(".lesson-list"),this.content=$(".lesson-content"),this.content.length&&this._init()}return o(t,[{key:"toggleLessonNav",value:function(){this.showListBtn.toggleClass("open"),this.list.toggleClass("open");var t=0;if($(window).width()>=980){var t=$(window).scrollTop();t>=60&&(t+=this.showListBtn.outerHeight())}this.list.is(".open")&&this.list.css({top:t}),this.list.not(".open").css({top:"0"})}},{key:"_addHandlers",value:function(){var t=this;this.showListBtn.on("click",function(){t.toggleLessonNav()}),this.content.find(".strategy__icon").on("click touchstart",function(){var t=new s.VideoPopup($(this).data("url"));t.show()});var e=$(".breadcrumbs").position().top,n=$(".breadcrumbs").outerHeight()+parseInt($(".breadcrumbs").css("margin-bottom"),10);$(window).scroll(function(){$(window).width()>=980&&($(window).scrollTop()>=e?($(".breadcrumbs").addClass("fixed"),$(".lesson").css("margin-top",n),t.showListBtn.addClass("fixed")):($(".breadcrumbs").removeClass("fixed"),$(".lesson").css("margin-top",0),t.showListBtn.removeClass("fixed")))})}},{key:"_init",value:function(){this._addHandlers(),$.browser.device=/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()),$.browser.device&&(0,r.getGETParam)("f")&&this.toggleLessonNav()}}]),t}()},{"../utils.js":6,"./Popup":3}],5:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o=t("./components/Course"),r=t("./components/Unit"),s=t("./components/Help"),a=t("./components/Popup"),u=t("./utils");$(document).ready(function(){new c});var c=function l(){i(this,l),(0,u.removeFocusOnClick)("a"),this.course=new o.Course,this.unit=new r.Unit,this.help=new s.Help,$("input[type='radio']").on("mouseup",function(){$(this).blur()}),$("label").on("click",function(t){var e=$(this).attr("for"),n=document.getElementById(e);"radio"==$(n).attr("type")&&($(n).attr("checked","checked"),t.preventDefault())});var t=$("#fitem_id_profile_field_birthdaydate"),e=$("#fitem_id_profile_field_academicinstitute");if(t.length){new u.Combobox(t.find(".fselect"),{autocomplete:!1})}if(e.length){new u.Combobox(e.find(".fselect"))}$(".advantage__link").on("click",function(){var t=new a.VideoPopup($(this).data("url"));t.show()});var n=$(".achievements__courses");n.length&&!function(){var t=(0,u.getGETParam)("courseid")||(0,u.getGETParam)("id");$.each(n.find("li a"),function(e,n){n.dataset.courseId==t&&$(n).parent().addClass("selected")})}()}},{"./components/Course":1,"./components/Help":2,"./components/Popup":3,"./components/Unit":4,"./utils":6}],6:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t){for(var e,n=[],i=window.location.search.substr(1).split("&"),o=0;o<i.length;o++)n=i[o].split("="),n[0]===t&&(e=decodeURIComponent(n[1]));return e}function r(t,e){var n=$(window).scrollTop(),i=!0,o=$(t),r=e;$(window).scroll(function(){i&&(n=$(window).scrollTop(),i=!1),$(window).scrollTop()>n&&o.fadeOut(120),clearTimeout($.data(document.body,"scrollTimer-"+t)),$.data(document.body,"scrollTimer-"+t,setTimeout(function(){o.fadeIn(60),i=!0,r&&r()},100))})}function s(t){var e=$(t);e.on("mousedown",function(t){t.currentTarget.dataset.pressed=!0}),e.on("mouseup",function(t){t.currentTarget.dataset.pressed=!1}),e.on("focusin",function(t){var e=t.currentTarget;"true"!==e.dataset.pressed&&$(e).addClass("focus")}),e.on("focusout",function(t){$(t.currentTarget).removeClass("focus")})}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();n.getGETParam=o,n.toggleWithScroll=r,n.removeFocusOnClick=s;n.Combobox=function(){function t(e){var n=arguments.length<=1||void 0===arguments[1]?{autocomplete:!0}:arguments[1];i(this,t),this._container=$(e),this._config=n,this._container.length&&(this._select=this._container.find("select"),this._wrapper=null,this._list=null,this._input=null,this._render(),this._addHandlers())}return a(t,[{key:"_render",value:function(){this._wrapper=document.createElement("div"),$(this._wrapper).addClass("select"),this._select.appendTo(this._wrapper),this._container.append(this._wrapper),this._list=this._buildList(),this._config.autocomplete&&this.enableAutocomplete(),"disabled"===this._select.attr("disabled")&&$(this._wrapper).addClass("disabled")}},{key:"_buildInput",value:function(){var t=document.createElement("input");return $(t).addClass("select-input"),$(this._wrapper).append(t),t}},{key:"_buildList",value:function(){var t=this,e=document.createElement("ul");return $(e).addClass("select-list"),this._select.find("option").each(function(n,i){var o=document.createElement("li");o.textContent=i.textContent,o.dataset.optionValue=i.value,$(o).on("click",function(){$(e).find(".selected").removeClass("selected"),$(o).addClass("selected"),t._select.val(i.value)}),e.appendChild(o)}),$(this._wrapper).append(e),e}},{key:"_addHandlers",value:function(){var t=this;$(this._wrapper).on("click",function(){$(t._list).slideDown(100)}),$(this._list).on("click",function(e){$(t._list).slideUp(100),e.stopPropagation()})}},{key:"enableAutocomplete",value:function(){var t=this;$(this._wrapper).addClass("autocomplete"),this._input=this._buildInput(),$(this._list).find("li").each(function(e,n){$(n).on("click",function(){$(t._input).val(n.textContent)})}),$(this._input).on("keyup",function(e){var n=$(t._input).val();$(t._list).find(".selected").removeClass("selected"),$(t._list).children().each(function(){var t=new RegExp(n);-1!=$(this).text().search(t)?$(this).addClass("matched"):$(this).removeClass("matched")})}),$(this._input).trigger("keyup")}}]),t}()},{}]},{},[5]);
//# sourceMappingURL=data:application/json;base64,
